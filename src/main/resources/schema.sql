DROP TABLE IF EXISTS comments;
DROP TABLE IF EXISTS bookings;
DROP TABLE IF EXISTS items;
DROP TABLE IF EXISTS requests;
DROP TABLE IF EXISTS users CASCADE;

CREATE TABLE IF NOT EXISTS users (
             user_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
             name VARCHAR(40) NOT NULL,
             email VARCHAR(255) UNIQUE NOT NULL
           );
CREATE TABLE IF NOT EXISTS items(
             item_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
             name VARCHAR(40) NOT NULL,
             description VARCHAR(255),
             available BOOLEAN NOT NULL,
             owner_id BIGINT NOT NULL,
             request_id BIGINT,
             CONSTRAINT fk_item_owner FOREIGN KEY (owner_id) REFERENCES users (user_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS bookings (
    booking_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    start_date TIMESTAMP NOT NULL,
    end_date TIMESTAMP NOT NULL,
    item_id BIGINT NOT NULL,
    booker_id BIGINT NOT NULL,
    status VARCHAR(50) NOT NULL,
    CONSTRAINT bookings_status_check
        CHECK (status IN ('WAITING','APPROVED','REJECTED')),
    CONSTRAINT fk_booking_item FOREIGN KEY (item_id)
        REFERENCES items (item_id) ON DELETE CASCADE,
    CONSTRAINT fk_booking_booker FOREIGN KEY (booker_id)
        REFERENCES users (user_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS item_requests (
             request_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
             description VARCHAR(255) NOT NULL,
             requester_id BIGINT NOT NULL,
             CONSTRAINT fk_requester FOREIGN KEY (requester_id)
                REFERENCES users (user_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS comments (
             id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
             text VARCHAR(1000) NOT NULL,
             item_id BIGINT NOT NULL,
             author_id BIGINT NOT NULL,
             created TIMESTAMP WITHOUT TIME ZONE NOT NULL,
             CONSTRAINT pk_comment PRIMARY KEY (id),
             CONSTRAINT FK_COMMENT_ITEM FOREIGN KEY (item_id) REFERENCES items (item_id),
             CONSTRAINT FK_COMMENT_AUTHOR FOREIGN KEY (author_id) REFERENCES users (user_id)
);










